-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParSimplego where
import AbsSimplego
import LexSimplego
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '%=' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '*=' { PT _ (TS _ 9) }
  '+' { PT _ (TS _ 10) }
  '++' { PT _ (TS _ 11) }
  '+=' { PT _ (TS _ 12) }
  ',' { PT _ (TS _ 13) }
  '-' { PT _ (TS _ 14) }
  '--' { PT _ (TS _ 15) }
  '-=' { PT _ (TS _ 16) }
  '/' { PT _ (TS _ 17) }
  '/=' { PT _ (TS _ 18) }
  ':=' { PT _ (TS _ 19) }
  ';' { PT _ (TS _ 20) }
  '<' { PT _ (TS _ 21) }
  '<=' { PT _ (TS _ 22) }
  '=' { PT _ (TS _ 23) }
  '==' { PT _ (TS _ 24) }
  '>' { PT _ (TS _ 25) }
  '>=' { PT _ (TS _ 26) }
  'bool' { PT _ (TS _ 27) }
  'break' { PT _ (TS _ 28) }
  'continue' { PT _ (TS _ 29) }
  'else' { PT _ (TS _ 30) }
  'false' { PT _ (TS _ 31) }
  'for' { PT _ (TS _ 32) }
  'func' { PT _ (TS _ 33) }
  'if' { PT _ (TS _ 34) }
  'int' { PT _ (TS _ 35) }
  'return' { PT _ (TS _ 36) }
  'true' { PT _ (TS _ 37) }
  'var' { PT _ (TS _ 38) }
  '{' { PT _ (TS _ 39) }
  '||' { PT _ (TS _ 40) }
  '}' { PT _ (TS _ 41) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListTopDef { AbsSimplego.Program $1 }
TopDef :: { TopDef }
TopDef : 'func' Ident '(' ListArg ')' Type Block { AbsSimplego.FnDef $2 $4 $6 $7 }
ListTopDef :: { [TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
Arg :: { Arg }
Arg : Ident VarType { AbsSimplego.Arg $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Block :: { Block }
Block : '{' ListStmt '}' { AbsSimplego.Block (reverse $2) }
ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Stmt :: { Stmt }
Stmt : SimpleStmt ';' { AbsSimplego.SimpleStmt $1 }
     | ReturnStmt ';' { AbsSimplego.ReturnStmt $1 }
     | BreakStmt ';' { AbsSimplego.BreakStmt $1 }
     | ContinueStmt ';' { AbsSimplego.ContinueStmt $1 }
     | Block { AbsSimplego.BlockStmt $1 }
     | IfStmt { AbsSimplego.IfStmt $1 }
     | ForStmt { AbsSimplego.ForStmt $1 }
SimpleStmt :: { SimpleStmt }
SimpleStmt : {- empty -} { AbsSimplego.EmptySimpleStmt }
           | Expr { AbsSimplego.ExprSimpStmt $1 }
           | AssStmt { AbsSimplego.AssSimpleStmt $1 }
           | ShAssStmt { AbsSimplego.ShortAssSimpleStmt $1 }
           | DeclStmt { AbsSimplego.DeclSimpleStmt $1 }
AssStmt :: { AssStmt }
AssStmt : Ident '=' Expr { AbsSimplego.Ass $1 $3 }
        | Ident '++' { AbsSimplego.Incr $1 }
        | Ident '--' { AbsSimplego.Decr $1 }
        | Ident '+=' Expr { AbsSimplego.AddAss $1 $3 }
        | Ident '-=' Expr { AbsSimplego.SubAss $1 $3 }
        | Ident '*=' Expr { AbsSimplego.MulAss $1 $3 }
        | Ident '/=' Expr { AbsSimplego.DivAss $1 $3 }
        | Ident '%=' Expr { AbsSimplego.ModAss $1 $3 }
ShAssStmt :: { ShAssStmt }
ShAssStmt : Ident ':=' Expr { AbsSimplego.ShortAss $1 $3 }
DeclStmt :: { DeclStmt }
DeclStmt : 'var' Ident Type Item { AbsSimplego.Decl $2 $3 $4 }
Item :: { Item }
Item : {- empty -} { AbsSimplego.NoInit }
     | '=' Expr { AbsSimplego.Init $2 }
ReturnStmt :: { ReturnStmt }
ReturnStmt : 'return' MaybeExpr { AbsSimplego.Ret $2 }
MaybeExpr :: { MaybeExpr }
MaybeExpr : Expr { AbsSimplego.MaybeExprYes $1 }
          | {- empty -} { AbsSimplego.MaybeExprNo }
BreakStmt :: { BreakStmt }
BreakStmt : 'break' { AbsSimplego.Break }
ContinueStmt :: { ContinueStmt }
ContinueStmt : 'continue' { AbsSimplego.Continue }
IfStmt :: { IfStmt }
IfStmt : 'if' Expr Block MaybeElse { AbsSimplego.If $2 $3 $4 }
MaybeElse :: { MaybeElse }
MaybeElse : {- empty -} { AbsSimplego.NoElse }
          | 'else' IfOrBlock { AbsSimplego.Else $2 }
IfOrBlock :: { IfOrBlock }
IfOrBlock : IfStmt { AbsSimplego.IfOfIfOrBlock $1 }
          | Block { AbsSimplego.BlockOfIfOrBlock $1 }
ForStmt :: { ForStmt }
ForStmt : 'for' ForClause Block { AbsSimplego.For $2 $3 }
ForClause :: { ForClause }
ForClause : Condition { AbsSimplego.ForCond $1 }
          | SimpleStmt ';' Condition ';' SimpleStmt { AbsSimplego.ForFull $1 $3 $5 }
Condition :: { Condition }
Condition : Expr { AbsSimplego.ExprCond $1 }
          | {- empty -} { AbsSimplego.TrueCond }
Type :: { Type }
Type : VarType { AbsSimplego.VarType $1 }
     | {- empty -} { AbsSimplego.Void }
     | 'func' '(' ListVarType ')' Type { AbsSimplego.Fun $3 $5 }
VarType :: { VarType }
VarType : 'int' { AbsSimplego.Int } | 'bool' { AbsSimplego.Bool }
ListVarType :: { [VarType] }
ListVarType : {- empty -} { [] }
            | VarType { (:[]) $1 }
            | VarType ',' ListVarType { (:) $1 $3 }
Expr6 :: { Expr }
Expr6 : Ident { AbsSimplego.EVar $1 }
      | Integer { AbsSimplego.ELitInt $1 }
      | 'func' '(' ListArg ')' Type Block { AbsSimplego.EFun $3 $5 $6 }
      | 'true' { AbsSimplego.ELitTrue }
      | 'false' { AbsSimplego.ELitFalse }
      | Ident '(' ListExpr ')' { AbsSimplego.EApp $1 $3 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr }
Expr5 : '-' Expr6 { AbsSimplego.ENeg $2 }
      | '!' Expr6 { AbsSimplego.ENot $2 }
      | Expr6 { $1 }
Expr4 :: { Expr }
Expr4 : Expr4 MulOp Expr5 { AbsSimplego.EMul $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : Expr3 AddOp Expr4 { AbsSimplego.EAdd $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr }
Expr2 : Expr2 RelOp Expr3 { AbsSimplego.ERel $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr }
Expr1 : Expr2 '&&' Expr1 { AbsSimplego.EAnd $1 $3 } | Expr2 { $1 }
Expr :: { Expr }
Expr : Expr1 '||' Expr { AbsSimplego.EOr $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { AddOp }
AddOp : '+' { AbsSimplego.PlusOp } | '-' { AbsSimplego.MinusOp }
MulOp :: { MulOp }
MulOp : '*' { AbsSimplego.TimesOp }
      | '/' { AbsSimplego.DivOp }
      | '%' { AbsSimplego.ModOp }
RelOp :: { RelOp }
RelOp : '<' { AbsSimplego.LTOp }
      | '<=' { AbsSimplego.LEOp }
      | '>' { AbsSimplego.GTOp }
      | '>=' { AbsSimplego.GEOp }
      | '==' { AbsSimplego.EQOp }
      | '!=' { AbsSimplego.NEOp }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

