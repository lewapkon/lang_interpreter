

module AbsSimplego where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef = FnDef Ident [Arg] Type Block
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Ident VarType
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SimpleStmt SimpleStmt
    | ReturnStmt ReturnStmt
    | BreakStmt BreakStmt
    | ContinueStmt ContinueStmt
    | BlockStmt Block
    | IfStmt IfStmt
    | ForStmt ForStmt
  deriving (Eq, Ord, Show, Read)

data SimpleStmt
    = EmptySimpleStmt
    | ExprSimpStmt Expr
    | AssSimpleStmt AssStmt
    | ShortAssSimpleStmt ShAssStmt
    | DeclSimpleStmt DeclStmt
  deriving (Eq, Ord, Show, Read)

data AssStmt
    = Ass Ident Expr
    | Incr Ident
    | Decr Ident
    | AddAss Ident Expr
    | SubAss Ident Expr
    | MulAss Ident Expr
    | DivAss Ident Expr
    | ModAss Ident Expr
  deriving (Eq, Ord, Show, Read)

data ShAssStmt = ShortAss Ident Expr
  deriving (Eq, Ord, Show, Read)

data DeclStmt = Decl Ident Type Item
  deriving (Eq, Ord, Show, Read)

data Item = NoInit | Init Expr
  deriving (Eq, Ord, Show, Read)

data ReturnStmt = Ret MaybeExpr
  deriving (Eq, Ord, Show, Read)

data MaybeExpr = MaybeExprYes Expr | MaybeExprNo
  deriving (Eq, Ord, Show, Read)

data BreakStmt = Break
  deriving (Eq, Ord, Show, Read)

data ContinueStmt = Continue
  deriving (Eq, Ord, Show, Read)

data IfStmt = If Expr Block MaybeElse
  deriving (Eq, Ord, Show, Read)

data MaybeElse = NoElse | Else IfOrBlock
  deriving (Eq, Ord, Show, Read)

data IfOrBlock = IfOfIfOrBlock IfStmt | BlockOfIfOrBlock Block
  deriving (Eq, Ord, Show, Read)

data ForStmt = For ForClause Block
  deriving (Eq, Ord, Show, Read)

data ForClause
    = ForCond Condition | ForFull SimpleStmt Condition SimpleStmt
  deriving (Eq, Ord, Show, Read)

data Condition = ExprCond Expr | TrueCond
  deriving (Eq, Ord, Show, Read)

data Type = VarType VarType | Void | Fun [VarType] Type
  deriving (Eq, Ord, Show, Read)

data VarType = Int | Bool
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | EFun [Arg] Type Block
    | ELitTrue
    | ELitFalse
    | EApp Ident [Expr]
    | ENeg Expr
    | ENot Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = PlusOp | MinusOp
  deriving (Eq, Ord, Show, Read)

data MulOp = TimesOp | DivOp | ModOp
  deriving (Eq, Ord, Show, Read)

data RelOp = LTOp | LEOp | GTOp | GEOp | EQOp | NEOp
  deriving (Eq, Ord, Show, Read)

