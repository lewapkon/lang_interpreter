module SkelSimplego where

-- Haskell module generated by the BNF converter

import AbsSimplego
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Show a => Program a -> Result
transProgram x = case x of
  Program _ topdefs -> failure x
transTopDef :: Show a => TopDef a -> Result
transTopDef x = case x of
  FnDef _ ident args type_ block -> failure x
transArg :: Show a => Arg a -> Result
transArg x = case x of
  Arg _ ident vartype -> failure x
transBlock :: Show a => Block a -> Result
transBlock x = case x of
  Block _ stmts -> failure x
transStmt :: Show a => Stmt a -> Result
transStmt x = case x of
  SimpleStmt _ simplestmt -> failure x
  ReturnStmt _ maybeexpr -> failure x
  BreakStmt _ -> failure x
  ContinueStmt _ -> failure x
  PrintStmt _ expr -> failure x
  BlockStmt _ block -> failure x
  IfStmt _ ifstmt -> failure x
  ForStmt _ forclause block -> failure x
transSimpleStmt :: Show a => SimpleStmt a -> Result
transSimpleStmt x = case x of
  EmptySimpleStmt _ -> failure x
  ExprSimpleStmt _ expr -> failure x
  AssSimpleStmt _ assstmt -> failure x
  DeclSimpleStmt _ ident vartype item -> failure x
  ShortDeclSimpleStmt _ ident expr -> failure x
transAssStmt :: Show a => AssStmt a -> Result
transAssStmt x = case x of
  Ass _ ident expr -> failure x
  Incr _ ident -> failure x
  Decr _ ident -> failure x
  AssOp _ ident assop expr -> failure x
transAssOp :: Show a => AssOp a -> Result
transAssOp x = case x of
  AddAss _ -> failure x
  SubAss _ -> failure x
  MulAss _ -> failure x
  DivAss _ -> failure x
  ModAss _ -> failure x
transItem :: Show a => Item a -> Result
transItem x = case x of
  NoInit _ -> failure x
  Init _ expr -> failure x
transMaybeExpr :: Show a => MaybeExpr a -> Result
transMaybeExpr x = case x of
  MaybeExprYes _ expr -> failure x
  MaybeExprNo _ -> failure x
transIfStmt :: Show a => IfStmt a -> Result
transIfStmt x = case x of
  If _ expr block maybeelse -> failure x
transMaybeElse :: Show a => MaybeElse a -> Result
transMaybeElse x = case x of
  NoElse _ -> failure x
  Else _ iforblock -> failure x
transIfOrBlock :: Show a => IfOrBlock a -> Result
transIfOrBlock x = case x of
  IfOfIfOrBlock _ ifstmt -> failure x
  BlockOfIfOrBlock _ block -> failure x
transForClause :: Show a => ForClause a -> Result
transForClause x = case x of
  ForCond _ condition -> failure x
  ForFull _ simplestmt1 condition simplestmt2 -> failure x
transCondition :: Show a => Condition a -> Result
transCondition x = case x of
  ExprCond _ expr -> failure x
  TrueCond _ -> failure x
transType :: Show a => Type a -> Result
transType x = case x of
  VarType _ vartype -> failure x
  TVoid _ -> failure x
transVarType :: Show a => VarType a -> Result
transVarType x = case x of
  TInt _ -> failure x
  TBool _ -> failure x
  TFun _ vartypes type_ -> failure x
transExpr :: Show a => Expr a -> Result
transExpr x = case x of
  EVar _ ident -> failure x
  ELitInt _ integer -> failure x
  EFun _ args type_ block -> failure x
  ELitTrue _ -> failure x
  ELitFalse _ -> failure x
  EApp _ expr exprs -> failure x
  ENeg _ expr -> failure x
  ENot _ expr -> failure x
  EMul _ expr1 mulop expr2 -> failure x
  EAdd _ expr1 addop expr2 -> failure x
  ERel _ expr1 relop expr2 -> failure x
  EAnd _ expr1 expr2 -> failure x
  EOr _ expr1 expr2 -> failure x
transAddOp :: Show a => AddOp a -> Result
transAddOp x = case x of
  PlusOp _ -> failure x
  MinusOp _ -> failure x
transMulOp :: Show a => MulOp a -> Result
transMulOp x = case x of
  TimesOp _ -> failure x
  DivOp _ -> failure x
  ModOp _ -> failure x
transRelOp :: Show a => RelOp a -> Result
transRelOp x = case x of
  LTOp _ -> failure x
  LEOp _ -> failure x
  GTOp _ -> failure x
  GEOp _ -> failure x
  EQOp _ -> failure x
  NEOp _ -> failure x

