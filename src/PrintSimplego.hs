{-# LANGUAGE FlexibleInstances, OverlappingInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintSimplego.
--   Generated by the BNF converter.

module PrintSimplego where

import AbsSimplego
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Ident where
  prt _ (Ident i) = doc (showString i)

instance Print (Program a) where
  prt i e = case e of
    Program _ topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print (TopDef a) where
  prt i e = case e of
    FnDef _ id args type_ block -> prPrec i 0 (concatD [doc (showString "func"), prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 type_, prt 0 block])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [TopDef a] where
  prt = prtList

instance Print (Arg a) where
  prt i e = case e of
    Arg _ id vartype -> prPrec i 0 (concatD [prt 0 id, prt 0 vartype])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Arg a] where
  prt = prtList

instance Print (Block a) where
  prt i e = case e of
    Block _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print [Stmt a] where
  prt = prtList

instance Print (Stmt a) where
  prt i e = case e of
    SimpleStmt _ simplestmt -> prPrec i 0 (concatD [prt 0 simplestmt, doc (showString ";")])
    ReturnStmt _ maybeexpr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 maybeexpr, doc (showString ";")])
    BreakStmt _ -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
    ContinueStmt _ -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    PrintStmt _ expr -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 expr, doc (showString ")"), doc (showString ";")])
    BlockStmt _ block -> prPrec i 0 (concatD [prt 0 block])
    IfStmt _ ifstmt -> prPrec i 0 (concatD [prt 0 ifstmt])
    ForStmt _ forclause block -> prPrec i 0 (concatD [doc (showString "for"), prt 0 forclause, prt 0 block])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (SimpleStmt a) where
  prt i e = case e of
    EmptySimpleStmt _ -> prPrec i 0 (concatD [])
    ExprSimpleStmt _ expr -> prPrec i 0 (concatD [prt 0 expr])
    AssSimpleStmt _ assstmt -> prPrec i 0 (concatD [prt 0 assstmt])
    DeclSimpleStmt _ id vartype item -> prPrec i 0 (concatD [doc (showString "var"), prt 0 id, prt 0 vartype, prt 0 item])
    ShortDeclSimpleStmt _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString ":="), prt 0 expr])

instance Print (AssStmt a) where
  prt i e = case e of
    Ass _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
    Incr _ id -> prPrec i 0 (concatD [prt 0 id, doc (showString "++")])
    Decr _ id -> prPrec i 0 (concatD [prt 0 id, doc (showString "--")])
    AssOp _ id assop expr -> prPrec i 0 (concatD [prt 0 id, prt 0 assop, prt 0 expr])

instance Print (AssOp a) where
  prt i e = case e of
    AddAss _ -> prPrec i 0 (concatD [doc (showString "+=")])
    SubAss _ -> prPrec i 0 (concatD [doc (showString "-=")])
    MulAss _ -> prPrec i 0 (concatD [doc (showString "*=")])
    DivAss _ -> prPrec i 0 (concatD [doc (showString "/=")])
    ModAss _ -> prPrec i 0 (concatD [doc (showString "%=")])

instance Print (Item a) where
  prt i e = case e of
    NoInit _ -> prPrec i 0 (concatD [])
    Init _ expr -> prPrec i 0 (concatD [doc (showString "="), prt 0 expr])

instance Print (MaybeExpr a) where
  prt i e = case e of
    MaybeExprYes _ expr -> prPrec i 0 (concatD [prt 0 expr])
    MaybeExprNo _ -> prPrec i 0 (concatD [])

instance Print (IfStmt a) where
  prt i e = case e of
    If _ expr block maybeelse -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr, prt 0 block, prt 0 maybeelse])

instance Print (MaybeElse a) where
  prt i e = case e of
    NoElse _ -> prPrec i 0 (concatD [])
    Else _ iforblock -> prPrec i 0 (concatD [doc (showString "else"), prt 0 iforblock])

instance Print (IfOrBlock a) where
  prt i e = case e of
    IfOfIfOrBlock _ ifstmt -> prPrec i 0 (concatD [prt 0 ifstmt])
    BlockOfIfOrBlock _ block -> prPrec i 0 (concatD [prt 0 block])

instance Print (ForClause a) where
  prt i e = case e of
    ForCond _ condition -> prPrec i 0 (concatD [prt 0 condition])
    ForFull _ simplestmt1 condition simplestmt2 -> prPrec i 0 (concatD [prt 0 simplestmt1, doc (showString ";"), prt 0 condition, doc (showString ";"), prt 0 simplestmt2])

instance Print (Condition a) where
  prt i e = case e of
    ExprCond _ expr -> prPrec i 0 (concatD [prt 0 expr])
    TrueCond _ -> prPrec i 0 (concatD [])

instance Print (Type a) where
  prt i e = case e of
    VarType _ vartype -> prPrec i 0 (concatD [prt 0 vartype])
    TVoid _ -> prPrec i 0 (concatD [])

instance Print (VarType a) where
  prt i e = case e of
    TInt _ -> prPrec i 0 (concatD [doc (showString "int")])
    TBool _ -> prPrec i 0 (concatD [doc (showString "bool")])
    TFun _ vartypes type_ -> prPrec i 0 (concatD [doc (showString "func"), doc (showString "("), prt 0 vartypes, doc (showString ")"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [VarType a] where
  prt = prtList

instance Print (Expr a) where
  prt i e = case e of
    EVar _ id -> prPrec i 7 (concatD [prt 0 id])
    ELitInt _ n -> prPrec i 7 (concatD [prt 0 n])
    EFun _ args type_ block -> prPrec i 7 (concatD [doc (showString "func"), doc (showString "("), prt 0 args, doc (showString ")"), prt 0 type_, prt 0 block])
    ELitTrue _ -> prPrec i 7 (concatD [doc (showString "true")])
    ELitFalse _ -> prPrec i 7 (concatD [doc (showString "false")])
    EApp _ expr exprs -> prPrec i 6 (concatD [prt 6 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    ENeg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    ENot _ expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    EMul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    EAdd _ expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Expr a] where
  prt = prtList

instance Print (AddOp a) where
  prt i e = case e of
    PlusOp _ -> prPrec i 0 (concatD [doc (showString "+")])
    MinusOp _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (MulOp a) where
  prt i e = case e of
    TimesOp _ -> prPrec i 0 (concatD [doc (showString "*")])
    DivOp _ -> prPrec i 0 (concatD [doc (showString "/")])
    ModOp _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (RelOp a) where
  prt i e = case e of
    LTOp _ -> prPrec i 0 (concatD [doc (showString "<")])
    LEOp _ -> prPrec i 0 (concatD [doc (showString "<=")])
    GTOp _ -> prPrec i 0 (concatD [doc (showString ">")])
    GEOp _ -> prPrec i 0 (concatD [doc (showString ">=")])
    EQOp _ -> prPrec i 0 (concatD [doc (showString "==")])
    NEOp _ -> prPrec i 0 (concatD [doc (showString "!=")])

