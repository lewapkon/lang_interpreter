-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.     TopDef ::= "func" Ident "(" [Arg] ")" Type Block ;

separator  nonempty TopDef "" ;

Arg.       Arg ::= Ident VarType;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

SimpleStmt.   Stmt ::= SimpleStmt ";" ;
ReturnStmt.   Stmt ::= "return" MaybeExpr ";" ;
BreakStmt.    Stmt ::= "break" ";" ;
ContinueStmt. Stmt ::= "continue" ";" ;
PrintStmt.    Stmt ::= "print" "(" Expr ")" ";" ;
BlockStmt.    Stmt ::= Block ;
IfStmt.       Stmt ::= IfStmt ;
ForStmt.      Stmt ::= "for" ForClause Block ;

EmptySimpleStmt.    SimpleStmt ::= ;
ExprSimpleStmt.     SimpleStmt ::= Expr ;
AssSimpleStmt.      SimpleStmt ::= AssStmt ;
DeclSimpleStmt.     SimpleStmt ::= "var" Ident VarType Item ;

Ass.       AssStmt ::= Ident "=" Expr ;
Incr.      AssStmt ::= Ident "++" ;
Decr.      AssStmt ::= Ident "--" ;
AssOp.     AssStmt ::= Ident AssOp Expr ;
AddAss.    AssOp   ::= "+=" ;
SubAss.    AssOp   ::= "-=" ;
MulAss.    AssOp   ::= "*=" ;
DivAss.    AssOp   ::= "/=" ;
ModAss.    AssOp   ::= "%=" ;

NoInit.    Item ::= ;
Init.      Item ::= "=" Expr ;

MaybeExprYes. MaybeExpr ::= Expr ;
MaybeExprNo.  MaybeExpr ::= ;

If.        IfStmt ::= "if" Expr Block MaybeElse;

NoElse.    MaybeElse ::= ;
Else.      MaybeElse ::= "else" IfOrBlock;

IfOfIfOrBlock.    IfOrBlock ::= IfStmt ;
BlockOfIfOrBlock. IfOrBlock ::= Block ;

ForCond.   ForClause ::= Condition ;
ForFull.   ForClause ::= SimpleStmt ";" Condition ";" SimpleStmt ;

ExprCond.  Condition ::= Expr ;
TrueCond.  Condition ::= ;

-- Types ---------------------------------------------------

VarType.   Type ::= VarType ;
TVoid.     Type ::= ;
TInt.      VarType ::= "int" ;
TBool.     VarType ::= "bool" ;
TFun.      VarType ::= "func" "(" [VarType] ")" Type ;
separator  VarType "," ;

-- Expressions ---------------------------------------------

EVar.      Expr7 ::= Ident ;
ELitInt.   Expr7 ::= Integer ;
EFun.      Expr7 ::= "func" "(" [Arg] ")" Type Block ;
ELitTrue.  Expr7 ::= "true" ;
ELitFalse. Expr7 ::= "false" ;

EApp.      Expr6 ::= Expr6 "(" [Expr] ")" ;

ENeg.      Expr5 ::= "-" Expr6 ;
ENot.      Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 7 ;

separator  Expr "," ;

-- operators -----------------------------------------------

PlusOp.    AddOp ::= "+" ;
MinusOp.   AddOp ::= "-" ;

TimesOp.   MulOp ::= "*" ;
DivOp.     MulOp ::= "/" ;
ModOp.     MulOp ::= "%" ;

LTOp.      RelOp ::= "<" ;
LEOp.      RelOp ::= "<=" ;
GTOp.      RelOp ::= ">" ;
GEOp.      RelOp ::= ">=" ;
EQOp.      RelOp ::= "==" ;
NEOp.      RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;
comment    "/*" "*/" ;
